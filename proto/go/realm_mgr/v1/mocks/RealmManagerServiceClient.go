// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	realm_mgr_v1 "github.com/alexZaicev/realm-mgr/proto/go/realm_mgr/v1"
)

// RealmManagerServiceClient is an autogenerated mock type for the RealmManagerServiceClient type
type RealmManagerServiceClient struct {
	mock.Mock
}

// CreateRealm provides a mock function with given fields: ctx, in, opts
func (_m *RealmManagerServiceClient) CreateRealm(ctx context.Context, in *realm_mgr_v1.CreateRealmRequest, opts ...grpc.CallOption) (*realm_mgr_v1.CreateRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *realm_mgr_v1.CreateRealmResponse
	if rf, ok := ret.Get(0).(func(context.Context, *realm_mgr_v1.CreateRealmRequest, ...grpc.CallOption) *realm_mgr_v1.CreateRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*realm_mgr_v1.CreateRealmResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *realm_mgr_v1.CreateRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRealm provides a mock function with given fields: ctx, in, opts
func (_m *RealmManagerServiceClient) GetRealm(ctx context.Context, in *realm_mgr_v1.GetRealmRequest, opts ...grpc.CallOption) (*realm_mgr_v1.GetRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *realm_mgr_v1.GetRealmResponse
	if rf, ok := ret.Get(0).(func(context.Context, *realm_mgr_v1.GetRealmRequest, ...grpc.CallOption) *realm_mgr_v1.GetRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*realm_mgr_v1.GetRealmResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *realm_mgr_v1.GetRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseRealm provides a mock function with given fields: ctx, in, opts
func (_m *RealmManagerServiceClient) ReleaseRealm(ctx context.Context, in *realm_mgr_v1.ReleaseRealmRequest, opts ...grpc.CallOption) (*realm_mgr_v1.ReleaseRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *realm_mgr_v1.ReleaseRealmResponse
	if rf, ok := ret.Get(0).(func(context.Context, *realm_mgr_v1.ReleaseRealmRequest, ...grpc.CallOption) *realm_mgr_v1.ReleaseRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*realm_mgr_v1.ReleaseRealmResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *realm_mgr_v1.ReleaseRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRealm provides a mock function with given fields: ctx, in, opts
func (_m *RealmManagerServiceClient) UpdateRealm(ctx context.Context, in *realm_mgr_v1.UpdateRealmRequest, opts ...grpc.CallOption) (*realm_mgr_v1.UpdateRealmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *realm_mgr_v1.UpdateRealmResponse
	if rf, ok := ret.Get(0).(func(context.Context, *realm_mgr_v1.UpdateRealmRequest, ...grpc.CallOption) *realm_mgr_v1.UpdateRealmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*realm_mgr_v1.UpdateRealmResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *realm_mgr_v1.UpdateRealmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRealmManagerServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRealmManagerServiceClient creates a new instance of RealmManagerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRealmManagerServiceClient(t mockConstructorTestingTNewRealmManagerServiceClient) *RealmManagerServiceClient {
	mock := &RealmManagerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
