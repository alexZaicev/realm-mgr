// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	assert "github.com/stretchr/testify/assert"

	mock "github.com/stretchr/testify/mock"
)

// FieldValue is an autogenerated mock type for the FieldValue type
type FieldValue struct {
	mock.Mock
}

// String provides a mock function with given fields:
func (_m *FieldValue) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// assert provides a mock function with given fields: t, actual, field, index, level
func (_m *FieldValue) assert(t assert.TestingT, actual interface{}, field string, index int, level string) bool {
	ret := _m.Called(t, actual, field, index, level)

	var r0 bool
	if rf, ok := ret.Get(0).(func(assert.TestingT, interface{}, string, int, string) bool); ok {
		r0 = rf(t, actual, field, index, level)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewFieldValue interface {
	mock.TestingT
	Cleanup(func())
}

// NewFieldValue creates a new instance of FieldValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFieldValue(t mockConstructorTestingTNewFieldValue) *FieldValue {
	mock := &FieldValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
