// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	logging "github.com/alexZaicev/realm-mgr/internal/drivers/logging"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg
func (_m *Logger) Debug(msg string) {
	_m.Called(msg)
}

// Error provides a mock function with given fields: msg
func (_m *Logger) Error(msg string) {
	_m.Called(msg)
}

// Flush provides a mock function with given fields:
func (_m *Logger) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: msg
func (_m *Logger) Info(msg string) {
	_m.Called(msg)
}

// Warn provides a mock function with given fields: msg
func (_m *Logger) Warn(msg string) {
	_m.Called(msg)
}

// WithError provides a mock function with given fields: err
func (_m *Logger) WithError(err error) logging.Logger {
	ret := _m.Called(err)

	var r0 logging.Logger
	if rf, ok := ret.Get(0).(func(error) logging.Logger); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Logger)
		}
	}

	return r0
}

// WithField provides a mock function with given fields: key, value
func (_m *Logger) WithField(key string, value interface{}) logging.Logger {
	ret := _m.Called(key, value)

	var r0 logging.Logger
	if rf, ok := ret.Get(0).(func(string, interface{}) logging.Logger); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Logger)
		}
	}

	return r0
}

// WithFields provides a mock function with given fields: fields
func (_m *Logger) WithFields(fields logging.Fields) logging.Logger {
	ret := _m.Called(fields)

	var r0 logging.Logger
	if rf, ok := ret.Get(0).(func(logging.Fields) logging.Logger); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Logger)
		}
	}

	return r0
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
