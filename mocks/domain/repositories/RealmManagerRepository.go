// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/alexZaicev/realm-mgr/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RealmManagerRepository is an autogenerated mock type for the RealmManagerRepository type
type RealmManagerRepository struct {
	mock.Mock
}

// CreateRealm provides a mock function with given fields: ctx, realm
func (_m *RealmManagerRepository) CreateRealm(ctx context.Context, realm entities.Realm) error {
	ret := _m.Called(ctx, realm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Realm) error); ok {
		r0 = rf(ctx, realm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRealm provides a mock function with given fields: ctx, realmID, statuses
func (_m *RealmManagerRepository) DeleteRealm(ctx context.Context, realmID uuid.UUID, statuses ...entities.Status) error {
	_va := make([]interface{}, len(statuses))
	for _i := range statuses {
		_va[_i] = statuses[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, realmID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...entities.Status) error); ok {
		r0 = rf(ctx, realmID, statuses...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRealm provides a mock function with given fields: ctx, realmID, status
func (_m *RealmManagerRepository) GetRealm(ctx context.Context, realmID uuid.UUID, status entities.Status) (entities.Realm, error) {
	ret := _m.Called(ctx, realmID, status)

	var r0 entities.Realm
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entities.Status) entities.Realm); ok {
		r0 = rf(ctx, realmID, status)
	} else {
		r0 = ret.Get(0).(entities.Realm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entities.Status) error); ok {
		r1 = rf(ctx, realmID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRealm provides a mock function with given fields: ctx, realm, currentStatus
func (_m *RealmManagerRepository) UpdateRealm(ctx context.Context, realm entities.Realm, currentStatus entities.Status) error {
	ret := _m.Called(ctx, realm, currentStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Realm, entities.Status) error); ok {
		r0 = rf(ctx, realm, currentStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRealmManagerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRealmManagerRepository creates a new instance of RealmManagerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRealmManagerRepository(t mockConstructorTestingTNewRealmManagerRepository) *RealmManagerRepository {
	mock := &RealmManagerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
