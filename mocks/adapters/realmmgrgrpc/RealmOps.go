// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/alexZaicev/realm-mgr/internal/domain/entities"
	logging "github.com/alexZaicev/realm-mgr/internal/drivers/logging"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RealmOps is an autogenerated mock type for the RealmOps type
type RealmOps struct {
	mock.Mock
}

// CreateRealm provides a mock function with given fields: ctx, logger, name, description
func (_m *RealmOps) CreateRealm(ctx context.Context, logger logging.Logger, name string, description string) (entities.Realm, error) {
	ret := _m.Called(ctx, logger, name, description)

	var r0 entities.Realm
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, string, string) entities.Realm); ok {
		r0 = rf(ctx, logger, name, description)
	} else {
		r0 = ret.Get(0).(entities.Realm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, string, string) error); ok {
		r1 = rf(ctx, logger, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRealm provides a mock function with given fields: ctx, logger, realmID, status
func (_m *RealmOps) GetRealm(ctx context.Context, logger logging.Logger, realmID uuid.UUID, status entities.Status) (entities.Realm, error) {
	ret := _m.Called(ctx, logger, realmID, status)

	var r0 entities.Realm
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, uuid.UUID, entities.Status) entities.Realm); ok {
		r0 = rf(ctx, logger, realmID, status)
	} else {
		r0 = ret.Get(0).(entities.Realm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, uuid.UUID, entities.Status) error); ok {
		r1 = rf(ctx, logger, realmID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseRealm provides a mock function with given fields: ctx, logger, realmID
func (_m *RealmOps) ReleaseRealm(ctx context.Context, logger logging.Logger, realmID uuid.UUID) (entities.Realm, error) {
	ret := _m.Called(ctx, logger, realmID)

	var r0 entities.Realm
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, uuid.UUID) entities.Realm); ok {
		r0 = rf(ctx, logger, realmID)
	} else {
		r0 = ret.Get(0).(entities.Realm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, uuid.UUID) error); ok {
		r1 = rf(ctx, logger, realmID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRealm provides a mock function with given fields: ctx, logger, realm
func (_m *RealmOps) UpdateRealm(ctx context.Context, logger logging.Logger, realm entities.Realm) (entities.Realm, error) {
	ret := _m.Called(ctx, logger, realm)

	var r0 entities.Realm
	if rf, ok := ret.Get(0).(func(context.Context, logging.Logger, entities.Realm) entities.Realm); ok {
		r0 = rf(ctx, logger, realm)
	} else {
		r0 = ret.Get(0).(entities.Realm)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, logging.Logger, entities.Realm) error); ok {
		r1 = rf(ctx, logger, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRealmOps interface {
	mock.TestingT
	Cleanup(func())
}

// NewRealmOps creates a new instance of RealmOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRealmOps(t mockConstructorTestingTNewRealmOps) *RealmOps {
	mock := &RealmOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
