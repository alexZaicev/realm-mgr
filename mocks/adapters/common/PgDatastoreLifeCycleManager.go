// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	postgres "github.com/alexZaicev/realm-mgr/internal/adapters/postgres"
	mock "github.com/stretchr/testify/mock"
)

// PgDatastoreLifeCycleManager is an autogenerated mock type for the PgDatastoreLifeCycleManager type
type PgDatastoreLifeCycleManager struct {
	mock.Mock
}

// CommitChanges provides a mock function with given fields: _a0
func (_m *PgDatastoreLifeCycleManager) CommitChanges(_a0 *postgres.DataStore) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*postgres.DataStore) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNonTransactionalReadDatastore provides a mock function with given fields: _a0
func (_m *PgDatastoreLifeCycleManager) NewNonTransactionalReadDatastore(_a0 context.Context) *postgres.DataStore {
	ret := _m.Called(_a0)

	var r0 *postgres.DataStore
	if rf, ok := ret.Get(0).(func(context.Context) *postgres.DataStore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgres.DataStore)
		}
	}

	return r0
}

// NewWriteDatastore provides a mock function with given fields: _a0
func (_m *PgDatastoreLifeCycleManager) NewWriteDatastore(_a0 context.Context) (*postgres.DataStore, error) {
	ret := _m.Called(_a0)

	var r0 *postgres.DataStore
	if rf, ok := ret.Get(0).(func(context.Context) *postgres.DataStore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgres.DataStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackChanges provides a mock function with given fields: _a0
func (_m *PgDatastoreLifeCycleManager) RollbackChanges(_a0 *postgres.DataStore) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*postgres.DataStore) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPgDatastoreLifeCycleManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewPgDatastoreLifeCycleManager creates a new instance of PgDatastoreLifeCycleManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPgDatastoreLifeCycleManager(t mockConstructorTestingTNewPgDatastoreLifeCycleManager) *PgDatastoreLifeCycleManager {
	mock := &PgDatastoreLifeCycleManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
