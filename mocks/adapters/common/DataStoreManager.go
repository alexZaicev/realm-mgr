// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repositories "github.com/alexZaicev/realm-mgr/internal/domain/repositories"
	mock "github.com/stretchr/testify/mock"
)

// DataStoreManager is an autogenerated mock type for the DataStoreManager type
type DataStoreManager struct {
	mock.Mock
}

// CommitChanges provides a mock function with given fields: datastore, auditstore
func (_m *DataStoreManager) CommitChanges(datastore repositories.RealmManagerRepository, auditstore repositories.RealmManagerAuditRepository) error {
	ret := _m.Called(datastore, auditstore)

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.RealmManagerRepository, repositories.RealmManagerAuditRepository) error); ok {
		r0 = rf(datastore, auditstore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNonTransactionalReadAuditstore provides a mock function with given fields: ctx
func (_m *DataStoreManager) NewNonTransactionalReadAuditstore(ctx context.Context) repositories.RealmManagerAuditRepository {
	ret := _m.Called(ctx)

	var r0 repositories.RealmManagerAuditRepository
	if rf, ok := ret.Get(0).(func(context.Context) repositories.RealmManagerAuditRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.RealmManagerAuditRepository)
		}
	}

	return r0
}

// NewNonTransactionalReadDatastore provides a mock function with given fields: ctx
func (_m *DataStoreManager) NewNonTransactionalReadDatastore(ctx context.Context) repositories.RealmManagerRepository {
	ret := _m.Called(ctx)

	var r0 repositories.RealmManagerRepository
	if rf, ok := ret.Get(0).(func(context.Context) repositories.RealmManagerRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.RealmManagerRepository)
		}
	}

	return r0
}

// NewWriteDatastore provides a mock function with given fields: ctx
func (_m *DataStoreManager) NewWriteDatastore(ctx context.Context) (repositories.RealmManagerRepository, repositories.RealmManagerAuditRepository, error) {
	ret := _m.Called(ctx)

	var r0 repositories.RealmManagerRepository
	if rf, ok := ret.Get(0).(func(context.Context) repositories.RealmManagerRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.RealmManagerRepository)
		}
	}

	var r1 repositories.RealmManagerAuditRepository
	if rf, ok := ret.Get(1).(func(context.Context) repositories.RealmManagerAuditRepository); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(repositories.RealmManagerAuditRepository)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RollbackChanges provides a mock function with given fields: datastore, auditstore
func (_m *DataStoreManager) RollbackChanges(datastore repositories.RealmManagerRepository, auditstore repositories.RealmManagerAuditRepository) error {
	ret := _m.Called(datastore, auditstore)

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.RealmManagerRepository, repositories.RealmManagerAuditRepository) error); ok {
		r0 = rf(datastore, auditstore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDataStoreManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataStoreManager creates a new instance of DataStoreManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataStoreManager(t mockConstructorTestingTNewDataStoreManager) *DataStoreManager {
	mock := &DataStoreManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
