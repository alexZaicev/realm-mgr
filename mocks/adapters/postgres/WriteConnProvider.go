// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pgdb "github.com/alexZaicev/realm-mgr/internal/drivers/pgdb"
	mock "github.com/stretchr/testify/mock"
)

// WriteConnProvider is an autogenerated mock type for the WriteConnProvider type
type WriteConnProvider struct {
	mock.Mock
}

// Commit provides a mock function with given fields: conn
func (_m *WriteConnProvider) Commit(conn pgdb.Conn) error {
	ret := _m.Called(conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgdb.Conn) error); ok {
		r0 = rf(conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields: conn
func (_m *WriteConnProvider) Rollback(conn pgdb.Conn) error {
	ret := _m.Called(conn)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgdb.Conn) error); ok {
		r0 = rf(conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionalConn provides a mock function with given fields: ctx
func (_m *WriteConnProvider) TransactionalConn(ctx context.Context) (pgdb.Conn, error) {
	ret := _m.Called(ctx)

	var r0 pgdb.Conn
	if rf, ok := ret.Get(0).(func(context.Context) pgdb.Conn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgdb.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWriteConnProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewWriteConnProvider creates a new instance of WriteConnProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWriteConnProvider(t mockConstructorTestingTNewWriteConnProvider) *WriteConnProvider {
	mock := &WriteConnProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
